{"ast":null,"code":"var _jsxFileName = \"/home/dell/Desktop/BlockChain/Ethereum/ThoughtwinCoin/thoughtwin-coin-front-end/src/Component/thoughtwin-contract/index.js\";\nimport React, { useEffect } from 'react';\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ThoughtWinContract() {\n  const web3Connect = async () => {\n    try {\n      const web3 = new Web3(Web3.givenProvider || 'localhost:8545');\n      const accounts = await web3.eth.getAccounts();\n      const network = await web3.eth.net.getNetworkType();\n      console.log(network);\n      console.log('web3', accounts);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const {\n      ethereum\n    } = window;\n    return Boolean(ethereum && ethereum.isMetaMask);\n  };\n\n  const MetaMaskClientCheck = () => {\n    //Now we check to see if MetaMask is installed\n    if (!isMetaMaskInstalled()) {\n      //If it isn't installed we ask the user to click to install it\n      //   onboardButton.innerText = 'Click here to install MetaMask!';\n      console.log('Please install MetaMask');\n    } else {\n      //If it is installed we change our button text\n      //   onboardButton.innerText = 'Connect';\n      onClickConnect();\n    }\n  };\n\n  const onClickConnect = async () => {\n    const {\n      ethereum\n    } = window;\n\n    try {\n      // Will open the MetaMask UI\n      // You should disable this button while the request is pending!\n      await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      await web3Connect();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: MetaMaskClientCheck,\n      children: \"web3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_c = ThoughtWinContract;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThoughtWinContract\");","map":{"version":3,"sources":["/home/dell/Desktop/BlockChain/Ethereum/ThoughtwinCoin/thoughtwin-coin-front-end/src/Component/thoughtwin-contract/index.js"],"names":["React","useEffect","Web3","ThoughtWinContract","web3Connect","web3","givenProvider","accounts","eth","getAccounts","network","net","getNetworkType","console","log","e","error","isMetaMaskInstalled","ethereum","window","Boolean","isMetaMask","MetaMaskClientCheck","onClickConnect","request","method"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AACA,eAAe,SAASC,kBAAT,GAA8B;AAC3C,QAAMC,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,IAAI,GAAG,IAAIH,IAAJ,CAASA,IAAI,CAACI,aAAL,IAAsB,gBAA/B,CAAb;AAEA,YAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAvB;AACA,YAAMC,OAAO,GAAG,MAAML,IAAI,CAACG,GAAL,CAASG,GAAT,CAAaC,cAAb,EAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AAEAG,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBP,QAApB;AACD,KARD,CAQE,OAAOQ,CAAP,EAAU;AACVF,MAAAA,OAAO,CAACG,KAAR,CAAcD,CAAd;AACD;AACF,GAZD;;AAcA,QAAME,mBAAmB,GAAG,MAAM;AAChC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAeC,MAArB;AACA,WAAOC,OAAO,CAACF,QAAQ,IAAIA,QAAQ,CAACG,UAAtB,CAAd;AACD,GAJD;;AAMA,QAAMC,mBAAmB,GAAG,MAAM;AAChC;AACA,QAAI,CAACL,mBAAmB,EAAxB,EAA4B;AAC1B;AACA;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,KAJD,MAIO;AACL;AACA;AACAS,MAAAA,cAAc;AACf;AACF,GAXD;;AAaA,QAAMA,cAAc,GAAG,YAAY;AACjC,UAAM;AAAEL,MAAAA;AAAF,QAAeC,MAArB;;AACA,QAAI;AACF;AACA;AACA,YAAMD,QAAQ,CAACM,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAN;AACA,YAAMrB,WAAW,EAAjB;AACD,KALD,CAKE,OAAOY,KAAP,EAAc;AACdH,MAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACD;AACF,GAVD;;AAYA,sBACE;AAAA,2BACE;AAAQ,MAAA,OAAO,EAAEM,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;KAnDuBnB,kB","sourcesContent":["import React, { useEffect } from 'react'\nimport Web3 from 'web3'\nexport default function ThoughtWinContract() {\n  const web3Connect = async () => {\n    try {\n      const web3 = new Web3(Web3.givenProvider || 'localhost:8545')\n\n      const accounts = await web3.eth.getAccounts()\n      const network = await web3.eth.net.getNetworkType()\n      console.log(network)\n\n      console.log('web3', accounts)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const { ethereum } = window\n    return Boolean(ethereum && ethereum.isMetaMask)\n  }\n\n  const MetaMaskClientCheck = () => {\n    //Now we check to see if MetaMask is installed\n    if (!isMetaMaskInstalled()) {\n      //If it isn't installed we ask the user to click to install it\n      //   onboardButton.innerText = 'Click here to install MetaMask!';\n      console.log('Please install MetaMask')\n    } else {\n      //If it is installed we change our button text\n      //   onboardButton.innerText = 'Connect';\n      onClickConnect()\n    }\n  }\n\n  const onClickConnect = async () => {\n    const { ethereum } = window\n    try {\n      // Will open the MetaMask UI\n      // You should disable this button while the request is pending!\n      await ethereum.request({ method: 'eth_requestAccounts' })\n      await web3Connect()\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  return (\n    <div>\n      <button onClick={MetaMaskClientCheck}>web3</button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}