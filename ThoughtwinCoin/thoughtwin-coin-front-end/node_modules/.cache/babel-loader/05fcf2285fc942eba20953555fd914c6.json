{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { BigNumber, ethers } from 'ethers';\nimport { defaultAbiCoder } from 'ethers/lib/utils';\nimport { ExecutionType, Networks } from './enums';\nimport { Utils } from './utils';\n\nvar Multicall =\n/** @class */\nfunction () {\n  function Multicall(_options) {\n    this._options = _options;\n    this.ABI = [{\n      constant: false,\n      inputs: [{\n        components: [{\n          name: 'target',\n          type: 'address'\n        }, {\n          name: 'callData',\n          type: 'bytes'\n        }],\n        name: 'calls',\n        type: 'tuple[]'\n      }],\n      name: 'aggregate',\n      outputs: [{\n        name: 'blockNumber',\n        type: 'uint256'\n      }, {\n        name: 'returnData',\n        type: 'bytes[]'\n      }],\n      payable: false,\n      stateMutability: 'nonpayable',\n      type: 'function'\n    }, {\n      inputs: [{\n        internalType: 'bool',\n        name: 'requireSuccess',\n        type: 'bool'\n      }, {\n        components: [{\n          internalType: 'address',\n          name: 'target',\n          type: 'address'\n        }, {\n          internalType: 'bytes',\n          name: 'callData',\n          type: 'bytes'\n        }],\n        internalType: 'struct Multicall2.Call[]',\n        name: 'calls',\n        type: 'tuple[]'\n      }],\n      name: 'tryBlockAndAggregate',\n      outputs: [{\n        internalType: 'uint256',\n        name: 'blockNumber',\n        type: 'uint256'\n      }, {\n        internalType: 'bytes32',\n        name: 'blockHash',\n        type: 'bytes32'\n      }, {\n        components: [{\n          internalType: 'bool',\n          name: 'success',\n          type: 'bool'\n        }, {\n          internalType: 'bytes',\n          name: 'returnData',\n          type: 'bytes'\n        }],\n        internalType: 'struct Multicall2.Result[]',\n        name: 'returnData',\n        type: 'tuple[]'\n      }],\n      stateMutability: 'nonpayable',\n      type: 'function'\n    }];\n\n    if (this._options.web3Instance) {\n      this._executionType = ExecutionType.web3;\n      return;\n    }\n\n    if (this._options.ethersProvider) {\n      this._executionType = ExecutionType.ethers;\n      return;\n    }\n\n    if (this._options.nodeUrl) {\n      this._executionType = ExecutionType.customHttp;\n      return;\n    }\n\n    throw new Error( // tslint:disable-next-line: max-line-length\n    'Your options passed in our incorrect they need to match either `MulticallOptionsEthers`, `MulticallOptionsWeb3` or `MulticallOptionsCustomJsonRpcProvider` interfaces');\n  }\n  /**\r\n   * Call all the contract calls in 1\r\n   * @param calls The calls\r\n   */\n\n\n  Multicall.prototype.call = function (contractCallContexts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var aggregateResponse, returnObject, response, contractCallsResults, originalContractCallContext, returnObjectResult, method, methodContext, originalContractCallMethodContext, outputTypes, decodedReturnValues;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!Array.isArray(contractCallContexts)) {\n              contractCallContexts = [contractCallContexts];\n            }\n\n            return [4\n            /*yield*/\n            , this.execute(this.buildAggregateCallContext(contractCallContexts))];\n\n          case 1:\n            aggregateResponse = _a.sent();\n            returnObject = {\n              results: {},\n              blockNumber: aggregateResponse.blockNumber\n            };\n\n            for (response = 0; response < aggregateResponse.results.length; response++) {\n              contractCallsResults = aggregateResponse.results[response];\n              originalContractCallContext = contractCallContexts[contractCallsResults.contractContextIndex];\n              returnObjectResult = {\n                originalContractCallContext: Utils.deepClone(originalContractCallContext),\n                callsReturnContext: []\n              };\n\n              for (method = 0; method < contractCallsResults.methodResults.length; method++) {\n                methodContext = contractCallsResults.methodResults[method];\n                originalContractCallMethodContext = originalContractCallContext.calls[methodContext.contractMethodIndex];\n                outputTypes = this.findOutputTypesFromAbi(originalContractCallContext.abi, originalContractCallMethodContext.methodName);\n\n                if (this._options.tryAggregate && !methodContext.result.success) {\n                  returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                    returnValues: [],\n                    decoded: false,\n                    reference: originalContractCallMethodContext.reference,\n                    methodName: originalContractCallMethodContext.methodName,\n                    methodParameters: originalContractCallMethodContext.methodParameters,\n                    success: false\n                  }));\n                  continue;\n                }\n\n                if (outputTypes && outputTypes.length > 0) {\n                  decodedReturnValues = defaultAbiCoder.decode( // tslint:disable-next-line: no-any\n                  outputTypes, this.getReturnDataFromResult(methodContext.result));\n                  returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                    returnValues: this.formatReturnValues(decodedReturnValues),\n                    decoded: true,\n                    reference: originalContractCallMethodContext.reference,\n                    methodName: originalContractCallMethodContext.methodName,\n                    methodParameters: originalContractCallMethodContext.methodParameters,\n                    success: true\n                  }));\n                } else {\n                  returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                    returnValues: this.getReturnDataFromResult(methodContext.result),\n                    decoded: false,\n                    reference: originalContractCallMethodContext.reference,\n                    methodName: originalContractCallMethodContext.methodName,\n                    methodParameters: originalContractCallMethodContext.methodParameters,\n                    success: true\n                  }));\n                }\n              }\n\n              returnObject.results[returnObjectResult.originalContractCallContext.reference] = returnObjectResult;\n            }\n\n            return [2\n            /*return*/\n            , returnObject];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get return data from result\r\n   * @param result The result\r\n   */\n  // tslint:disable-next-line: no-any\n\n\n  Multicall.prototype.getReturnDataFromResult = function (result) {\n    if (this._options.tryAggregate) {\n      return result.returnData;\n    }\n\n    return result;\n  };\n  /**\r\n   * Format return values so its always an array\r\n   * @param decodedReturnValues The decoded return values\r\n   */\n  // tslint:disable-next-line: no-any\n\n\n  Multicall.prototype.formatReturnValues = function (decodedReturnValues) {\n    var decodedReturnResults = decodedReturnValues;\n\n    if (decodedReturnValues.length === 1) {\n      decodedReturnResults = decodedReturnValues[0];\n    }\n\n    if (Array.isArray(decodedReturnResults)) {\n      return decodedReturnResults;\n    }\n\n    return [decodedReturnResults];\n  };\n  /**\r\n   * Build aggregate call context\r\n   * @param contractCallContexts The contract call contexts\r\n   */\n\n\n  Multicall.prototype.buildAggregateCallContext = function (contractCallContexts) {\n    var aggregateCallContext = [];\n\n    for (var contract = 0; contract < contractCallContexts.length; contract++) {\n      var contractContext = contractCallContexts[contract];\n      var executingInterface = new ethers.utils.Interface(JSON.stringify(contractContext.abi));\n\n      for (var method = 0; method < contractContext.calls.length; method++) {\n        // https://github.com/ethers-io/ethers.js/issues/211\n        var methodContext = contractContext.calls[method]; // tslint:disable-next-line: no-unused-expression\n\n        var encodedData = executingInterface.encodeFunctionData(methodContext.methodName, methodContext.methodParameters);\n        aggregateCallContext.push({\n          contractContextIndex: Utils.deepClone(contract),\n          contractMethodIndex: Utils.deepClone(method),\n          target: contractContext.contractAddress,\n          encodedData: encodedData\n        });\n      }\n    }\n\n    return aggregateCallContext;\n  };\n  /**\r\n   * Find output types from abi\r\n   * @param abi The abi\r\n   * @param methodName The method name\r\n   */\n\n\n  Multicall.prototype.findOutputTypesFromAbi = function (abi, methodName) {\n    var _a;\n\n    for (var i = 0; i < abi.length; i++) {\n      if (((_a = abi[i].name) === null || _a === void 0 ? void 0 : _a.trim()) === methodName.trim()) {\n        return abi[i].outputs;\n      }\n    }\n\n    return undefined;\n  };\n  /**\r\n   * Execute the multicall contract call\r\n   * @param calls The calls\r\n   */\n\n\n  Multicall.prototype.execute = function (calls) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this._executionType;\n\n            switch (_a) {\n              case ExecutionType.web3:\n                return [3\n                /*break*/\n                , 1];\n\n              case ExecutionType.ethers:\n                return [3\n                /*break*/\n                , 3];\n\n              case ExecutionType.customHttp:\n                return [3\n                /*break*/\n                , 3];\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.executeWithWeb3(calls)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.executeWithEthersOrCustom(calls)];\n\n          case 4:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 5:\n            throw new Error(this._executionType + \" is not defined\");\n        }\n      });\n    });\n  };\n  /**\r\n   * Execute aggregate with web3 instance\r\n   * @param calls The calls context\r\n   */\n\n\n  Multicall.prototype.executeWithWeb3 = function (calls) {\n    return __awaiter(this, void 0, void 0, function () {\n      var web3, networkId, contract, contractResponse, contractResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            web3 = this.getTypedOptions().web3Instance;\n            return [4\n            /*yield*/\n            , web3.eth.net.getId()];\n\n          case 1:\n            networkId = _a.sent();\n            contract = new web3.eth.Contract(this.ABI, this.getContractBasedOnNetwork(networkId));\n            if (!this._options.tryAggregate) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , contract.methods.tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls)).call()];\n\n          case 2:\n            contractResponse = _a.sent();\n            contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\n            return [2\n            /*return*/\n            , this.buildUpAggregateResponse(contractResponse, calls)];\n\n          case 3:\n            return [4\n            /*yield*/\n            , contract.methods.aggregate(this.mapCallContextToMatchContractFormat(calls)).call()];\n\n          case 4:\n            contractResponse = _a.sent();\n            contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\n            return [2\n            /*return*/\n            , this.buildUpAggregateResponse(contractResponse, calls)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Execute with ethers using passed in provider context or custom one\r\n   * @param calls The calls\r\n   */\n\n\n  Multicall.prototype.executeWithEthersOrCustom = function (calls) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ethersProvider, customProvider, network, contract, contractResponse, contractResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ethersProvider = this.getTypedOptions().ethersProvider;\n\n            if (!ethersProvider) {\n              customProvider = this.getTypedOptions();\n\n              if (customProvider.nodeUrl) {\n                ethersProvider = new ethers.providers.JsonRpcProvider(customProvider.nodeUrl);\n              } else {\n                ethersProvider = ethers.getDefaultProvider();\n              }\n            }\n\n            return [4\n            /*yield*/\n            , ethersProvider.getNetwork()];\n\n          case 1:\n            network = _a.sent();\n            contract = new ethers.Contract(this.getContractBasedOnNetwork(network.chainId), this.ABI, ethersProvider);\n            if (!this._options.tryAggregate) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , contract.callStatic.tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls))];\n\n          case 2:\n            contractResponse = _a.sent();\n            return [2\n            /*return*/\n            , this.buildUpAggregateResponse(contractResponse, calls)];\n\n          case 3:\n            return [4\n            /*yield*/\n            , contract.callStatic.aggregate(this.mapCallContextToMatchContractFormat(calls))];\n\n          case 4:\n            contractResponse = _a.sent();\n            return [2\n            /*return*/\n            , this.buildUpAggregateResponse(contractResponse, calls)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Build up the aggregated response from the contract response mapping\r\n   * metadata from the calls\r\n   * @param contractResponse The contract response\r\n   * @param calls The calls\r\n   */\n\n\n  Multicall.prototype.buildUpAggregateResponse = function (contractResponse, calls) {\n    var aggregateResponse = {\n      blockNumber: contractResponse.blockNumber.toNumber(),\n      results: []\n    };\n\n    var _loop_1 = function (i) {\n      var existingResponse = aggregateResponse.results.find(function (c) {\n        return c.contractContextIndex === calls[i].contractContextIndex;\n      });\n\n      if (existingResponse) {\n        existingResponse.methodResults.push({\n          result: contractResponse.returnData[i],\n          contractMethodIndex: calls[i].contractMethodIndex\n        });\n      } else {\n        aggregateResponse.results.push({\n          methodResults: [{\n            result: contractResponse.returnData[i],\n            contractMethodIndex: calls[i].contractMethodIndex\n          }],\n          contractContextIndex: calls[i].contractContextIndex\n        });\n      }\n    };\n\n    for (var i = 0; i < contractResponse.returnData.length; i++) {\n      _loop_1(i);\n    }\n\n    return aggregateResponse;\n  };\n  /**\r\n   * Map call contract to match contract format\r\n   * @param calls The calls context\r\n   */\n\n\n  Multicall.prototype.mapCallContextToMatchContractFormat = function (calls) {\n    return calls.map(function (call) {\n      return {\n        target: call.target,\n        callData: call.encodedData\n      };\n    });\n  };\n  /**\r\n   * Get typed options\r\n   */\n\n\n  Multicall.prototype.getTypedOptions = function () {\n    return this._options;\n  };\n  /**\r\n   * Get the contract based on the network\r\n   * @param tryAggregate The tryAggregate\r\n   * @param network The network\r\n   */\n\n\n  Multicall.prototype.getContractBasedOnNetwork = function (network) {\n    // if they have overriden the multicall custom contract address then use that\n    if (this._options.multicallCustomContractAddress) {\n      return this._options.multicallCustomContractAddress;\n    }\n\n    switch (network) {\n      case Networks.mainnet:\n      case Networks.kovan:\n      case Networks.rinkeby:\n      case Networks.ropsten:\n      case Networks.goerli:\n        return '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696';\n\n      case Networks.bsc:\n        return '0xC50F4c1E81c873B2204D7eFf7069Ffec6Fbe136D';\n\n      case Networks.bsc_testnet:\n        return '0x6e5BB1a5Ad6F68A8D7D6A5e47750eC15773d6042';\n\n      case Networks.xdai:\n        return '0x2325b72990D81892E0e09cdE5C80DD221F147F8B';\n\n      case Networks.mumbai:\n        return '0xe9939e7Ea7D7fb619Ac57f648Da7B1D425832631';\n\n      case Networks.matic:\n        return '0x275617327c958bD06b5D6b871E7f491D76113dd8';\n\n      case Networks.etherlite:\n        return '0x21681750D7ddCB8d1240eD47338dC984f94AF2aC';\n\n      case Networks.arbitrum:\n        return '0x7a7443f8c577d537f1d8cd4a629d40a3148dd7ee';\n\n      case Networks.avalauncheFuji:\n        return '0x3D015943d2780fE97FE3f69C97edA2CCC094f78c';\n\n      case Networks.avalauncheMainnet:\n        return '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4';\n\n      default:\n        throw new Error(\"Network - \" + network + \" is not got a contract defined it only supports mainnet, kovan, rinkeby, bsc and ropsten\");\n    }\n  };\n\n  return Multicall;\n}();\n\nexport { Multicall };","map":{"version":3,"sources":["/home/dell/Desktop/BlockChain/Ethereum/ThoughtwinCoin/node_modules/ethereum-multicall/dist/esm/multicall.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","BigNumber","ethers","defaultAbiCoder","ExecutionType","Networks","Utils","Multicall","_options","ABI","constant","inputs","components","name","type","outputs","payable","stateMutability","internalType","web3Instance","_executionType","web3","ethersProvider","nodeUrl","customHttp","Error","prototype","contractCallContexts","aggregateResponse","returnObject","response","contractCallsResults","originalContractCallContext","returnObjectResult","method","methodContext","originalContractCallMethodContext","outputTypes","decodedReturnValues","_a","Array","isArray","execute","buildAggregateCallContext","results","blockNumber","contractContextIndex","deepClone","callsReturnContext","methodResults","calls","contractMethodIndex","findOutputTypesFromAbi","abi","methodName","tryAggregate","success","returnValues","decoded","reference","methodParameters","decode","getReturnDataFromResult","formatReturnValues","returnData","decodedReturnResults","aggregateCallContext","contract","contractContext","executingInterface","utils","Interface","JSON","stringify","encodedData","encodeFunctionData","target","contractAddress","i","trim","undefined","_b","executeWithWeb3","executeWithEthersOrCustom","networkId","contractResponse","getTypedOptions","eth","net","getId","Contract","getContractBasedOnNetwork","methods","tryBlockAndAggregate","mapCallContextToMatchContractFormat","from","buildUpAggregateResponse","aggregate","customProvider","network","providers","JsonRpcProvider","getDefaultProvider","getNetwork","chainId","callStatic","toNumber","_loop_1","existingResponse","find","c","map","callData","multicallCustomContractAddress","mainnet","kovan","rinkeby","ropsten","goerli","bsc","bsc_testnet","xdai","mumbai","matic","etherlite","arbitrum","avalauncheFuji","avalauncheMainnet"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nimport { BigNumber, ethers } from 'ethers';\r\nimport { defaultAbiCoder } from 'ethers/lib/utils';\r\nimport { ExecutionType, Networks } from './enums';\r\nimport { Utils } from './utils';\r\nvar Multicall = /** @class */ (function () {\r\n    function Multicall(_options) {\r\n        this._options = _options;\r\n        this.ABI = [\r\n            {\r\n                constant: false,\r\n                inputs: [\r\n                    {\r\n                        components: [\r\n                            { name: 'target', type: 'address' },\r\n                            { name: 'callData', type: 'bytes' },\r\n                        ],\r\n                        name: 'calls',\r\n                        type: 'tuple[]',\r\n                    },\r\n                ],\r\n                name: 'aggregate',\r\n                outputs: [\r\n                    { name: 'blockNumber', type: 'uint256' },\r\n                    { name: 'returnData', type: 'bytes[]' },\r\n                ],\r\n                payable: false,\r\n                stateMutability: 'nonpayable',\r\n                type: 'function',\r\n            },\r\n            {\r\n                inputs: [\r\n                    {\r\n                        internalType: 'bool',\r\n                        name: 'requireSuccess',\r\n                        type: 'bool',\r\n                    },\r\n                    {\r\n                        components: [\r\n                            {\r\n                                internalType: 'address',\r\n                                name: 'target',\r\n                                type: 'address',\r\n                            },\r\n                            {\r\n                                internalType: 'bytes',\r\n                                name: 'callData',\r\n                                type: 'bytes',\r\n                            },\r\n                        ],\r\n                        internalType: 'struct Multicall2.Call[]',\r\n                        name: 'calls',\r\n                        type: 'tuple[]',\r\n                    },\r\n                ],\r\n                name: 'tryBlockAndAggregate',\r\n                outputs: [\r\n                    {\r\n                        internalType: 'uint256',\r\n                        name: 'blockNumber',\r\n                        type: 'uint256',\r\n                    },\r\n                    {\r\n                        internalType: 'bytes32',\r\n                        name: 'blockHash',\r\n                        type: 'bytes32',\r\n                    },\r\n                    {\r\n                        components: [\r\n                            {\r\n                                internalType: 'bool',\r\n                                name: 'success',\r\n                                type: 'bool',\r\n                            },\r\n                            {\r\n                                internalType: 'bytes',\r\n                                name: 'returnData',\r\n                                type: 'bytes',\r\n                            },\r\n                        ],\r\n                        internalType: 'struct Multicall2.Result[]',\r\n                        name: 'returnData',\r\n                        type: 'tuple[]',\r\n                    },\r\n                ],\r\n                stateMutability: 'nonpayable',\r\n                type: 'function',\r\n            },\r\n        ];\r\n        if (this._options.web3Instance) {\r\n            this._executionType = ExecutionType.web3;\r\n            return;\r\n        }\r\n        if (this._options.ethersProvider) {\r\n            this._executionType = ExecutionType.ethers;\r\n            return;\r\n        }\r\n        if (this._options.nodeUrl) {\r\n            this._executionType = ExecutionType.customHttp;\r\n            return;\r\n        }\r\n        throw new Error(\r\n        // tslint:disable-next-line: max-line-length\r\n        'Your options passed in our incorrect they need to match either `MulticallOptionsEthers`, `MulticallOptionsWeb3` or `MulticallOptionsCustomJsonRpcProvider` interfaces');\r\n    }\r\n    /**\r\n     * Call all the contract calls in 1\r\n     * @param calls The calls\r\n     */\r\n    Multicall.prototype.call = function (contractCallContexts) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var aggregateResponse, returnObject, response, contractCallsResults, originalContractCallContext, returnObjectResult, method, methodContext, originalContractCallMethodContext, outputTypes, decodedReturnValues;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!Array.isArray(contractCallContexts)) {\r\n                            contractCallContexts = [contractCallContexts];\r\n                        }\r\n                        return [4 /*yield*/, this.execute(this.buildAggregateCallContext(contractCallContexts))];\r\n                    case 1:\r\n                        aggregateResponse = _a.sent();\r\n                        returnObject = {\r\n                            results: {},\r\n                            blockNumber: aggregateResponse.blockNumber,\r\n                        };\r\n                        for (response = 0; response < aggregateResponse.results.length; response++) {\r\n                            contractCallsResults = aggregateResponse.results[response];\r\n                            originalContractCallContext = contractCallContexts[contractCallsResults.contractContextIndex];\r\n                            returnObjectResult = {\r\n                                originalContractCallContext: Utils.deepClone(originalContractCallContext),\r\n                                callsReturnContext: [],\r\n                            };\r\n                            for (method = 0; method < contractCallsResults.methodResults.length; method++) {\r\n                                methodContext = contractCallsResults.methodResults[method];\r\n                                originalContractCallMethodContext = originalContractCallContext.calls[methodContext.contractMethodIndex];\r\n                                outputTypes = this.findOutputTypesFromAbi(originalContractCallContext.abi, originalContractCallMethodContext.methodName);\r\n                                if (this._options.tryAggregate && !methodContext.result.success) {\r\n                                    returnObjectResult.callsReturnContext.push(Utils.deepClone({\r\n                                        returnValues: [],\r\n                                        decoded: false,\r\n                                        reference: originalContractCallMethodContext.reference,\r\n                                        methodName: originalContractCallMethodContext.methodName,\r\n                                        methodParameters: originalContractCallMethodContext.methodParameters,\r\n                                        success: false,\r\n                                    }));\r\n                                    continue;\r\n                                }\r\n                                if (outputTypes && outputTypes.length > 0) {\r\n                                    decodedReturnValues = defaultAbiCoder.decode(\r\n                                    // tslint:disable-next-line: no-any\r\n                                    outputTypes, this.getReturnDataFromResult(methodContext.result));\r\n                                    returnObjectResult.callsReturnContext.push(Utils.deepClone({\r\n                                        returnValues: this.formatReturnValues(decodedReturnValues),\r\n                                        decoded: true,\r\n                                        reference: originalContractCallMethodContext.reference,\r\n                                        methodName: originalContractCallMethodContext.methodName,\r\n                                        methodParameters: originalContractCallMethodContext.methodParameters,\r\n                                        success: true,\r\n                                    }));\r\n                                }\r\n                                else {\r\n                                    returnObjectResult.callsReturnContext.push(Utils.deepClone({\r\n                                        returnValues: this.getReturnDataFromResult(methodContext.result),\r\n                                        decoded: false,\r\n                                        reference: originalContractCallMethodContext.reference,\r\n                                        methodName: originalContractCallMethodContext.methodName,\r\n                                        methodParameters: originalContractCallMethodContext.methodParameters,\r\n                                        success: true,\r\n                                    }));\r\n                                }\r\n                            }\r\n                            returnObject.results[returnObjectResult.originalContractCallContext.reference] = returnObjectResult;\r\n                        }\r\n                        return [2 /*return*/, returnObject];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get return data from result\r\n     * @param result The result\r\n     */\r\n    // tslint:disable-next-line: no-any\r\n    Multicall.prototype.getReturnDataFromResult = function (result) {\r\n        if (this._options.tryAggregate) {\r\n            return result.returnData;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Format return values so its always an array\r\n     * @param decodedReturnValues The decoded return values\r\n     */\r\n    // tslint:disable-next-line: no-any\r\n    Multicall.prototype.formatReturnValues = function (decodedReturnValues) {\r\n        var decodedReturnResults = decodedReturnValues;\r\n        if (decodedReturnValues.length === 1) {\r\n            decodedReturnResults = decodedReturnValues[0];\r\n        }\r\n        if (Array.isArray(decodedReturnResults)) {\r\n            return decodedReturnResults;\r\n        }\r\n        return [decodedReturnResults];\r\n    };\r\n    /**\r\n     * Build aggregate call context\r\n     * @param contractCallContexts The contract call contexts\r\n     */\r\n    Multicall.prototype.buildAggregateCallContext = function (contractCallContexts) {\r\n        var aggregateCallContext = [];\r\n        for (var contract = 0; contract < contractCallContexts.length; contract++) {\r\n            var contractContext = contractCallContexts[contract];\r\n            var executingInterface = new ethers.utils.Interface(JSON.stringify(contractContext.abi));\r\n            for (var method = 0; method < contractContext.calls.length; method++) {\r\n                // https://github.com/ethers-io/ethers.js/issues/211\r\n                var methodContext = contractContext.calls[method];\r\n                // tslint:disable-next-line: no-unused-expression\r\n                var encodedData = executingInterface.encodeFunctionData(methodContext.methodName, methodContext.methodParameters);\r\n                aggregateCallContext.push({\r\n                    contractContextIndex: Utils.deepClone(contract),\r\n                    contractMethodIndex: Utils.deepClone(method),\r\n                    target: contractContext.contractAddress,\r\n                    encodedData: encodedData,\r\n                });\r\n            }\r\n        }\r\n        return aggregateCallContext;\r\n    };\r\n    /**\r\n     * Find output types from abi\r\n     * @param abi The abi\r\n     * @param methodName The method name\r\n     */\r\n    Multicall.prototype.findOutputTypesFromAbi = function (abi, methodName) {\r\n        var _a;\r\n        for (var i = 0; i < abi.length; i++) {\r\n            if (((_a = abi[i].name) === null || _a === void 0 ? void 0 : _a.trim()) === methodName.trim()) {\r\n                return abi[i].outputs;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Execute the multicall contract call\r\n     * @param calls The calls\r\n     */\r\n    Multicall.prototype.execute = function (calls) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this._executionType;\r\n                        switch (_a) {\r\n                            case ExecutionType.web3: return [3 /*break*/, 1];\r\n                            case ExecutionType.ethers: return [3 /*break*/, 3];\r\n                            case ExecutionType.customHttp: return [3 /*break*/, 3];\r\n                        }\r\n                        return [3 /*break*/, 5];\r\n                    case 1: return [4 /*yield*/, this.executeWithWeb3(calls)];\r\n                    case 2: return [2 /*return*/, _b.sent()];\r\n                    case 3: return [4 /*yield*/, this.executeWithEthersOrCustom(calls)];\r\n                    case 4: return [2 /*return*/, _b.sent()];\r\n                    case 5: throw new Error(this._executionType + \" is not defined\");\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Execute aggregate with web3 instance\r\n     * @param calls The calls context\r\n     */\r\n    Multicall.prototype.executeWithWeb3 = function (calls) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var web3, networkId, contract, contractResponse, contractResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        web3 = this.getTypedOptions().web3Instance;\r\n                        return [4 /*yield*/, web3.eth.net.getId()];\r\n                    case 1:\r\n                        networkId = _a.sent();\r\n                        contract = new web3.eth.Contract(this.ABI, this.getContractBasedOnNetwork(networkId));\r\n                        if (!this._options.tryAggregate) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, contract.methods\r\n                                .tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls))\r\n                                .call()];\r\n                    case 2:\r\n                        contractResponse = (_a.sent());\r\n                        contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\r\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\r\n                    case 3: return [4 /*yield*/, contract.methods\r\n                            .aggregate(this.mapCallContextToMatchContractFormat(calls))\r\n                            .call()];\r\n                    case 4:\r\n                        contractResponse = (_a.sent());\r\n                        contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\r\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Execute with ethers using passed in provider context or custom one\r\n     * @param calls The calls\r\n     */\r\n    Multicall.prototype.executeWithEthersOrCustom = function (calls) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var ethersProvider, customProvider, network, contract, contractResponse, contractResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        ethersProvider = this.getTypedOptions()\r\n                            .ethersProvider;\r\n                        if (!ethersProvider) {\r\n                            customProvider = this.getTypedOptions();\r\n                            if (customProvider.nodeUrl) {\r\n                                ethersProvider = new ethers.providers.JsonRpcProvider(customProvider.nodeUrl);\r\n                            }\r\n                            else {\r\n                                ethersProvider = ethers.getDefaultProvider();\r\n                            }\r\n                        }\r\n                        return [4 /*yield*/, ethersProvider.getNetwork()];\r\n                    case 1:\r\n                        network = _a.sent();\r\n                        contract = new ethers.Contract(this.getContractBasedOnNetwork(network.chainId), this.ABI, ethersProvider);\r\n                        if (!this._options.tryAggregate) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, contract.callStatic.tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls))];\r\n                    case 2:\r\n                        contractResponse = (_a.sent());\r\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\r\n                    case 3: return [4 /*yield*/, contract.callStatic.aggregate(this.mapCallContextToMatchContractFormat(calls))];\r\n                    case 4:\r\n                        contractResponse = (_a.sent());\r\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Build up the aggregated response from the contract response mapping\r\n     * metadata from the calls\r\n     * @param contractResponse The contract response\r\n     * @param calls The calls\r\n     */\r\n    Multicall.prototype.buildUpAggregateResponse = function (contractResponse, calls) {\r\n        var aggregateResponse = {\r\n            blockNumber: contractResponse.blockNumber.toNumber(),\r\n            results: [],\r\n        };\r\n        var _loop_1 = function (i) {\r\n            var existingResponse = aggregateResponse.results.find(function (c) { return c.contractContextIndex === calls[i].contractContextIndex; });\r\n            if (existingResponse) {\r\n                existingResponse.methodResults.push({\r\n                    result: contractResponse.returnData[i],\r\n                    contractMethodIndex: calls[i].contractMethodIndex,\r\n                });\r\n            }\r\n            else {\r\n                aggregateResponse.results.push({\r\n                    methodResults: [\r\n                        {\r\n                            result: contractResponse.returnData[i],\r\n                            contractMethodIndex: calls[i].contractMethodIndex,\r\n                        },\r\n                    ],\r\n                    contractContextIndex: calls[i].contractContextIndex,\r\n                });\r\n            }\r\n        };\r\n        for (var i = 0; i < contractResponse.returnData.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n        return aggregateResponse;\r\n    };\r\n    /**\r\n     * Map call contract to match contract format\r\n     * @param calls The calls context\r\n     */\r\n    Multicall.prototype.mapCallContextToMatchContractFormat = function (calls) {\r\n        return calls.map(function (call) {\r\n            return {\r\n                target: call.target,\r\n                callData: call.encodedData,\r\n            };\r\n        });\r\n    };\r\n    /**\r\n     * Get typed options\r\n     */\r\n    Multicall.prototype.getTypedOptions = function () {\r\n        return this._options;\r\n    };\r\n    /**\r\n     * Get the contract based on the network\r\n     * @param tryAggregate The tryAggregate\r\n     * @param network The network\r\n     */\r\n    Multicall.prototype.getContractBasedOnNetwork = function (network) {\r\n        // if they have overriden the multicall custom contract address then use that\r\n        if (this._options.multicallCustomContractAddress) {\r\n            return this._options.multicallCustomContractAddress;\r\n        }\r\n        switch (network) {\r\n            case Networks.mainnet:\r\n            case Networks.kovan:\r\n            case Networks.rinkeby:\r\n            case Networks.ropsten:\r\n            case Networks.goerli:\r\n                return '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696';\r\n            case Networks.bsc:\r\n                return '0xC50F4c1E81c873B2204D7eFf7069Ffec6Fbe136D';\r\n            case Networks.bsc_testnet:\r\n                return '0x6e5BB1a5Ad6F68A8D7D6A5e47750eC15773d6042';\r\n            case Networks.xdai:\r\n                return '0x2325b72990D81892E0e09cdE5C80DD221F147F8B';\r\n            case Networks.mumbai:\r\n                return '0xe9939e7Ea7D7fb619Ac57f648Da7B1D425832631';\r\n            case Networks.matic:\r\n                return '0x275617327c958bD06b5D6b871E7f491D76113dd8';\r\n            case Networks.etherlite:\r\n                return '0x21681750D7ddCB8d1240eD47338dC984f94AF2aC';\r\n            case Networks.arbitrum:\r\n                return '0x7a7443f8c577d537f1d8cd4a629d40a3148dd7ee';\r\n            case Networks.avalauncheFuji:\r\n                return '0x3D015943d2780fE97FE3f69C97edA2CCC094f78c';\r\n            case Networks.avalauncheMainnet:\r\n                return '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4';\r\n            default:\r\n                throw new Error(\"Network - \" + network + \" is not got a contract defined it only supports mainnet, kovan, rinkeby, bsc and ropsten\");\r\n        }\r\n    };\r\n    return Multicall;\r\n}());\r\nexport { Multicall };\r\n"]},"metadata":{},"sourceType":"module"}