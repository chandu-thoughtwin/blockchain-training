{"ast":null,"code":"var _jsxFileName = \"/home/dell/Desktop/BlockChain/Ethereum/ThoughtwinCoin/thoughtwin-coin-front-end/src/Component/connect-wallet/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Web3 from 'web3';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setAccounts } from '../../redux/actions';\nimport MetaMaskOnboarding from '@metamask/onboarding';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ConnectWallet(props) {\n  _s();\n\n  const onBoarding = new MetaMaskOnboarding();\n  const account = useSelector(state => state.account);\n  const dispatch = useDispatch();\n\n  const web3Connect = async () => {\n    try {\n      const web3 = new Web3(Web3.givenProvider || 'localhost:8545');\n      const accounts = await web3.eth.getAccounts();\n      dispatch(setAccounts(1));\n      const network = await web3.eth.net.getNetworkType();\n      console.log(network);\n      console.log('web3', account);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const {\n      ethereum\n    } = window;\n    return Boolean(ethereum && ethereum.isMetaMask);\n  };\n\n  const onClickInstallMetaMask = () => {\n    onBoarding.startOnboarding();\n  };\n\n  const MetaMaskClientCheck = () => {\n    //Now we check to see if MetaMask is installed\n    if (!isMetaMaskInstalled()) {\n      //If it isn't installed we ask the user to click to install it\n      //   onboardButton.innerText = 'Click here to install MetaMask!';\n      onClickInstallMetaMask();\n      console.log('Please install MetaMask');\n    } else {\n      //If it is installed we change our button text\n      //   onboardButton.innerText = 'Connect';\n      onClickConnect();\n    }\n  };\n\n  const onClickConnect = async () => {\n    const {\n      ethereum\n    } = window;\n\n    try {\n      // Will open the MetaMask UI\n      // You should disable this button while the request is pending!\n      await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      await web3Connect();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: MetaMaskClientCheck,\n      children: \"web3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ConnectWallet, \"awcnllD/fK/t2nBhLqnu5nBWfcY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ConnectWallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectWallet\");","map":{"version":3,"sources":["/home/dell/Desktop/BlockChain/Ethereum/ThoughtwinCoin/thoughtwin-coin-front-end/src/Component/connect-wallet/index.js"],"names":["React","useEffect","Web3","useDispatch","useSelector","setAccounts","MetaMaskOnboarding","ConnectWallet","props","onBoarding","account","state","dispatch","web3Connect","web3","givenProvider","accounts","eth","getAccounts","network","net","getNetworkType","console","log","e","error","isMetaMaskInstalled","ethereum","window","Boolean","isMetaMask","onClickInstallMetaMask","startOnboarding","MetaMaskClientCheck","onClickConnect","request","method"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC3C,QAAMC,UAAU,GAAG,IAAIH,kBAAJ,EAAnB;AACA,QAAMI,OAAO,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACD,OAAlB,CAA3B;AACA,QAAME,QAAQ,GAAGT,WAAW,EAA5B;;AAEA,QAAMU,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,IAAI,GAAG,IAAIZ,IAAJ,CAASA,IAAI,CAACa,aAAL,IAAsB,gBAA/B,CAAb;AAEA,YAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAvB;AACAN,MAAAA,QAAQ,CAACP,WAAW,CAAC,CAAD,CAAZ,CAAR;AACA,YAAMc,OAAO,GAAG,MAAML,IAAI,CAACG,GAAL,CAASG,GAAT,CAAaC,cAAb,EAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AAEAG,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBb,OAApB;AACD,KATD,CASE,OAAOc,CAAP,EAAU;AACVF,MAAAA,OAAO,CAACG,KAAR,CAAcD,CAAd;AACD;AACF,GAbD;;AAeA,QAAME,mBAAmB,GAAG,MAAM;AAChC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAeC,MAArB;AACA,WAAOC,OAAO,CAACF,QAAQ,IAAIA,QAAQ,CAACG,UAAtB,CAAd;AACD,GAJD;;AAMA,QAAMC,sBAAsB,GAAG,MAAM;AACnCtB,IAAAA,UAAU,CAACuB,eAAX;AACD,GAFD;;AAIA,QAAMC,mBAAmB,GAAG,MAAM;AAChC;AACA,QAAI,CAACP,mBAAmB,EAAxB,EAA4B;AAC1B;AACA;AACAK,MAAAA,sBAAsB;AACtBT,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,KALD,MAKO;AACL;AACA;AACAW,MAAAA,cAAc;AACf;AACF,GAZD;;AAcA,QAAMA,cAAc,GAAG,YAAY;AACjC,UAAM;AAAEP,MAAAA;AAAF,QAAeC,MAArB;;AACA,QAAI;AACF;AACA;AACA,YAAMD,QAAQ,CAACQ,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAN;AACA,YAAMvB,WAAW,EAAjB;AACD,KALD,CAKE,OAAOY,KAAP,EAAc;AACdH,MAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACD;AACF,GAVD;;AAYA,sBACE;AAAA,2BACE;AAAQ,MAAA,OAAO,EAAEQ,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA7DuB1B,a;UAENH,W,EACCD,W;;;KAHKI,a","sourcesContent":["import React, { useEffect } from 'react'\nimport Web3 from 'web3'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setAccounts } from '../../redux/actions'\nimport MetaMaskOnboarding from '@metamask/onboarding'\n\nexport default function ConnectWallet(props) {\n  const onBoarding = new MetaMaskOnboarding()\n  const account = useSelector((state) => state.account)\n  const dispatch = useDispatch()\n\n  const web3Connect = async () => {\n    try {\n      const web3 = new Web3(Web3.givenProvider || 'localhost:8545')\n\n      const accounts = await web3.eth.getAccounts()\n      dispatch(setAccounts(1))\n      const network = await web3.eth.net.getNetworkType()\n      console.log(network)\n\n      console.log('web3', account)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const { ethereum } = window\n    return Boolean(ethereum && ethereum.isMetaMask)\n  }\n\n  const onClickInstallMetaMask = () => {\n    onBoarding.startOnboarding()\n  }\n\n  const MetaMaskClientCheck = () => {\n    //Now we check to see if MetaMask is installed\n    if (!isMetaMaskInstalled()) {\n      //If it isn't installed we ask the user to click to install it\n      //   onboardButton.innerText = 'Click here to install MetaMask!';\n      onClickInstallMetaMask()\n      console.log('Please install MetaMask')\n    } else {\n      //If it is installed we change our button text\n      //   onboardButton.innerText = 'Connect';\n      onClickConnect()\n    }\n  }\n\n  const onClickConnect = async () => {\n    const { ethereum } = window\n    try {\n      // Will open the MetaMask UI\n      // You should disable this button while the request is pending!\n      await ethereum.request({ method: 'eth_requestAccounts' })\n      await web3Connect()\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  return (\n    <div>\n      <button onClick={MetaMaskClientCheck}>web3</button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}